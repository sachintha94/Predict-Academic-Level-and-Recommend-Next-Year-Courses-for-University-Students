{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sachintha\\\\Desktop\\\\testing03\\\\frontend\\\\src\\\\Components\\\\Meter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './Meter.css'; // Include your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meter = () => {\n  _s();\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle user feedback\n  const [uploadProgress, setUploadProgress] = useState(0); // State to track upload progress\n  const fileInputRef = useRef(null); // Reference for file input\n\n  // Handle file selection and upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0]; // Get the selected file\n\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\n      return;\n    }\n    setResponseMessage(`Uploading \"${file.name}\"...`); // Provide feedback to the user\n\n    // Prepare form data\n    const formData = new FormData();\n    formData.append('file', file); // Append the file to the FormData object\n\n    // Use XMLHttpRequest to send the file and track progress\n    const xhr = new XMLHttpRequest(); // Initialize xhr\n    xhr.open('POST', 'http://127.0.0.1:5000/api/upload', true); // Set the request method and URL\n\n    // Track upload progress\n    xhr.upload.onprogress = event => {\n      if (event.lengthComputable) {\n        const progress = Math.round(event.loaded / event.total * 100);\n        console.log('Upload progress:', progress); // Log progress\n        setUploadProgress(progress); // Update progress state\n      }\n    };\n\n    // Simulate file upload and progress (replace with actual file upload logic)\n    const simulateUpload = () => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10; // Increment progress\n        setUploadProgress(progress); // Update progress state\n\n        if (progress >= 100) {\n          clearInterval(interval); // Stop simulation when upload completes\n          setResponseMessage(`File \"${file.name}\" uploaded successfully!`); // Success message\n        }\n      }, 500); // Simulate progress every 500ms\n    };\n    simulateUpload(); // Start the simulated upload\n\n    // Handle errors\n    xhr.onerror = () => {\n      setResponseMessage('An error occurred during the upload.');\n      setUploadProgress(0); // Reset progress\n    };\n    xhr.send(formData); // Send the form data\n  };\n\n  // Open file selection dialog\n  const handleFileSelect = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click(); // Trigger the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"fileUpload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"fileElem\",\n        ref: fileInputRef // Reference the input\n        ,\n        style: {\n          display: 'none'\n        } // Hide the input element\n        ,\n        onChange: handleFileUpload // Handle file selection\n        ,\n        accept: \".xls,.xlsx\" // Restrict file types to Excel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"fileSelect\",\n        onClick: handleFileSelect,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progressBarBackground\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progressBar\",\n            style: {\n              width: `${uploadProgress}%`\n            } // Set progress dynamically\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progressText\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [uploadProgress, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"responseMessage\",\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Meter, \"YrtxjRUX1Fn5OO4/8BsAv5kYEdM=\");\n_c = Meter;\nexport default Meter;\nvar _c;\n$RefreshReg$(_c, \"Meter\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Meter","_s","responseMessage","setResponseMessage","uploadProgress","setUploadProgress","fileInputRef","handleFileUpload","e","file","target","files","name","match","formData","FormData","append","xhr","XMLHttpRequest","open","upload","onprogress","event","lengthComputable","progress","Math","round","loaded","total","console","log","simulateUpload","interval","setInterval","clearInterval","onerror","send","handleFileSelect","current","click","className","children","type","ref","style","display","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","_c","$RefreshReg$"],"sources":["C:/Users/Sachintha/Desktop/testing03/frontend/src/Components/Meter.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './Meter.css'; // Include your CSS file for styling\r\n\r\nconst Meter = () => {\r\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle user feedback\r\n  const [uploadProgress, setUploadProgress] = useState(0); // State to track upload progress\r\n  const fileInputRef = useRef(null); // Reference for file input\r\n\r\n  // Handle file selection and upload\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0]; // Get the selected file\r\n\r\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\r\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\r\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\r\n      return;\r\n    }\r\n\r\n    setResponseMessage(`Uploading \"${file.name}\"...`); // Provide feedback to the user\r\n\r\n    // Prepare form data\r\n    const formData = new FormData();\r\n    formData.append('file', file); // Append the file to the FormData object\r\n\r\n    // Use XMLHttpRequest to send the file and track progress\r\n    const xhr = new XMLHttpRequest(); // Initialize xhr\r\n    xhr.open('POST', 'http://127.0.0.1:5000/api/upload', true); // Set the request method and URL\r\n\r\n    // Track upload progress\r\n    xhr.upload.onprogress = (event) => {\r\n      if (event.lengthComputable) {\r\n        const progress = Math.round((event.loaded / event.total) * 100);\r\n        console.log('Upload progress:', progress); // Log progress\r\n        setUploadProgress(progress); // Update progress state\r\n      }\r\n    };\r\n\r\n    // Simulate file upload and progress (replace with actual file upload logic)\r\n    const simulateUpload = () => {\r\n      let progress = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        progress += 10; // Increment progress\r\n        setUploadProgress(progress); // Update progress state\r\n\r\n        if (progress >= 100) {\r\n          clearInterval(interval); // Stop simulation when upload completes\r\n          setResponseMessage(`File \"${file.name}\" uploaded successfully!`); // Success message\r\n        }\r\n      }, 500); // Simulate progress every 500ms\r\n    };\r\n\r\n    simulateUpload(); // Start the simulated upload\r\n    \r\n    // Handle errors\r\n    xhr.onerror = () => {\r\n      setResponseMessage('An error occurred during the upload.');\r\n      setUploadProgress(0); // Reset progress\r\n    };\r\n\r\n    xhr.send(formData); // Send the form data\r\n  };\r\n\r\n  // Open file selection dialog\r\n  const handleFileSelect = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click(); // Trigger the file input\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploadContainer\">\r\n      <form className=\"fileUpload\">\r\n        {/* File input */}\r\n        <input\r\n          type=\"file\"\r\n          className=\"fileElem\"\r\n          ref={fileInputRef} // Reference the input\r\n          style={{ display: 'none' }} // Hide the input element\r\n          onChange={handleFileUpload} // Handle file selection\r\n          accept=\".xls,.xlsx\" // Restrict file types to Excel\r\n        />\r\n\r\n        {/* Trigger file selection */}\r\n        <label className=\"fileSelect\" onClick={handleFileSelect}>\r\n          Upload File\r\n        </label>\r\n\r\n        {/* Upload Progress Bar */}\r\n        <div className=\"progressContainer\">\r\n          <div className=\"progressBarBackground\">\r\n            <div\r\n              className=\"progressBar\"\r\n              style={{ width: `${uploadProgress}%` }} // Set progress dynamically\r\n            ></div>\r\n          </div>\r\n          <div className=\"progressText\">\r\n            <p>{uploadProgress}%</p>\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      {/* Display selected file name or feedback */}\r\n      {responseMessage && <p className=\"responseMessage\">{responseMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}