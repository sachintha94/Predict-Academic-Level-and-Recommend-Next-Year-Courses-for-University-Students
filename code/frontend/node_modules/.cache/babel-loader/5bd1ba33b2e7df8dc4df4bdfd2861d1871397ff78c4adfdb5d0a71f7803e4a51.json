{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sachintha\\\\Desktop\\\\testing03\\\\frontend\\\\src\\\\Components\\\\Meter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './Meter.css'; // Include your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meter = () => {\n  _s();\n  const [uploadedFiles, setUploadedFiles] = useState(null); // State to store uploaded files\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle server responses\n  const fileInputRef = useRef(null); // Reference for file input\n\n  // Handle file selection\n  const handleFilesUpload = async e => {\n    const files = e.target.files[0]; // Get the first file from the input\n\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\n      return;\n    }\n    setUploadedFiles(files); // Save files to the state\n\n    // Prepare form data\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('file', file); // Append each file to the FormData\n    });\n\n    // Send files to the backend\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/Cal_credit', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setResponseMessage(`Credits: ${result.credits}, Invalid Codes: ${result.invalid_codes.join(', ')}`);\n      } else if (result.error) {\n        setResponseMessage(`Error: ${result.error}`);\n      } else {\n        setResponseMessage(`Message: ${result.message}`);\n      }\n    } catch (error) {\n      setResponseMessage(`An error occurred: ${error.message}`);\n    }\n  };\n\n  // Open file selection dialog\n  const handleFileSelect = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click(); // Trigger the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"fileUpload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"fileElem\",\n        multiple: true,\n        ref: fileInputRef // Reference the input\n        ,\n        style: {\n          display: 'none'\n        } // Hide the input element\n        ,\n        onChange: handleFilesUpload // Handle file selection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"fileSelect\",\n        onClick: handleFileSelect,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"responseMessage\",\n        children: responseMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), uploadedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: uploadedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [file.name, \" - \", (file.size / (1024 * 1024)).toFixed(2), \" MB\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Meter, \"nk1bNtECgSicxL37nqHq2CxR0vo=\");\n_c = Meter;\nexport default Meter;\nvar _c;\n$RefreshReg$(_c, \"Meter\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Meter","_s","uploadedFiles","setUploadedFiles","responseMessage","setResponseMessage","fileInputRef","handleFilesUpload","e","files","target","file","name","match","formData","FormData","forEach","append","response","fetch","method","body","result","json","ok","credits","invalid_codes","join","error","message","handleFileSelect","current","click","children","className","type","multiple","ref","style","display","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","index","size","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Sachintha/Desktop/testing03/frontend/src/Components/Meter.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './Meter.css'; // Include your CSS file for styling\r\n\r\nconst Meter = () => {\r\n  const [uploadedFiles, setUploadedFiles] = useState(null); // State to store uploaded files\r\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle server responses\r\n  const fileInputRef = useRef(null); // Reference for file input\r\n\r\n  // Handle file selection\r\n  const handleFilesUpload = async (e) => {\r\n    const files = e.target.files[0]; // Get the first file from the input\r\n\r\n\r\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\r\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\r\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\r\n      return;\r\n    }\r\n    \r\n    setUploadedFiles(files); // Save files to the state\r\n\r\n    // Prepare form data\r\n    const formData = new FormData();\r\n    files.forEach((file) => {\r\n      formData.append('file', file); // Append each file to the FormData\r\n    });\r\n\r\n    // Send files to the backend\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/api/Cal_credit', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        setResponseMessage(`Credits: ${result.credits}, Invalid Codes: ${result.invalid_codes.join(', ')}`);\r\n      } else if (result.error) {\r\n        setResponseMessage(`Error: ${result.error}`);\r\n      } else {\r\n        setResponseMessage(`Message: ${result.message}`);\r\n      }\r\n    } \r\n    catch (error) {\r\n      setResponseMessage(`An error occurred: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Open file selection dialog\r\n  const handleFileSelect = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click(); // Trigger the file input\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"fileUpload\">\r\n        {/* File input */}\r\n        <input\r\n          type=\"file\"\r\n          className=\"fileElem\"\r\n          multiple\r\n          ref={fileInputRef} // Reference the input\r\n          style={{ display: 'none' }} // Hide the input element\r\n          onChange={handleFilesUpload} // Handle file selection\r\n        />\r\n\r\n        {/* Trigger file selection */}\r\n        <label className=\"fileSelect\" onClick={handleFileSelect}>\r\n          Upload File\r\n        </label>\r\n\r\n        {/* Display server response */}\r\n        {responseMessage && <p className=\"responseMessage\">{responseMessage}</p>}\r\n      </form>\r\n\r\n      {/* Display uploaded file names */}\r\n      {uploadedFiles.length > 0 && (\r\n        <ul>\r\n          {uploadedFiles.map((file, index) => (\r\n            <li key={index}>\r\n              {file.name} - {(file.size / (1024 * 1024)).toFixed(2)} MB\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}