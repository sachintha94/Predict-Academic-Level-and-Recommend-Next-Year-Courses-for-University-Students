{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sachintha\\\\Desktop\\\\testing03\\\\frontend\\\\src\\\\Components\\\\Meter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './Meter.css'; // Include your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meter = () => {\n  _s();\n  const [uploadedFile, setUploadedFile] = useState(null); // State to store the uploaded file\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle server responses\n  const [uploadProgress, setUploadProgress] = useState(0); // State to track upload progress\n  const fileInputRef = useRef(null); // Reference for file input\n\n  // Handle file selection\n  const handleFileUpload = async e => {\n    const file = e.target.files[0]; // Get the first file from the input\n    //setResponseMessage('file name',file)\n\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\n      return;\n    }\n    setUploadedFile(file); // Save the file to the state\n\n    // Prepare form data\n    const formData = new FormData();\n    formData.append('file', file); // Append the file to the FormData\n\n    try {\n      // Use XMLHttpRequest to track upload progress\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', 'http://127.0.0.1:5000/api/upload', true);\n\n      // Track upload progress\n      xhr.upload.onprogress = event => {\n        if (event.lengthComputable) {\n          const progress = Math.round(event.loaded / event.total * 100);\n          setUploadProgress(progress); // Update progress state\n        }\n      };\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          const result = JSON.parse(xhr.responseText);\n          setResponseMessage(`Credits: ${result.credits}, Invalid Codes: ${result.invalid_codes.join(', ')}`);\n        } else {\n          const result = JSON.parse(xhr.responseText);\n          setResponseMessage(`Error: ${result.error || 'An error occurred'}`);\n        }\n        setUploadProgress(0); // Reset progress after upload completes\n      };\n      xhr.onerror = () => {\n        setResponseMessage('An error occurred during the upload.');\n        setUploadProgress(0); // Reset progress\n      };\n      xhr.send(formData); // Send the form data\n    } catch (error) {\n      setResponseMessage(`An error occurred: ${error.message}`);\n    }\n  };\n\n  // Open file selection dialog\n  const handleFileSelect = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click(); // Trigger the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"fileUpload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"fileElem\",\n        ref: fileInputRef // Reference the input\n        ,\n        style: {\n          display: 'none'\n        } // Hide the input element\n        ,\n        onChange: handleFileUpload // Handle file selection\n        ,\n        accept: \".xls,.xlsx\" // Restrict file types to Excel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"fileSelect\",\n        onClick: handleFileSelect,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progressContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressBarBackground\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progressBar\",\n          style: {\n            width: `${uploadProgress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"progressText\",\n        children: uploadProgress > 0 ? `${((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.size) * (uploadProgress / 100) / (1024 * 1024)).toFixed(2)} MB out of ${((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.size) / (1024 * 1024)).toFixed(2)} MB (${uploadProgress}%)` : 'No file is currently uploading'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"responseMessage\",\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Meter, \"HGcXwPbogiL0EZ3WHYCZr2wv94I=\");\n_c = Meter;\nexport default Meter;\nvar _c;\n$RefreshReg$(_c, \"Meter\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Meter","_s","uploadedFile","setUploadedFile","responseMessage","setResponseMessage","uploadProgress","setUploadProgress","fileInputRef","handleFileUpload","e","file","target","files","name","match","formData","FormData","append","xhr","XMLHttpRequest","open","upload","onprogress","event","lengthComputable","progress","Math","round","loaded","total","onload","status","result","JSON","parse","responseText","credits","invalid_codes","join","error","onerror","send","message","handleFileSelect","current","click","className","children","type","ref","style","display","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","size","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Sachintha/Desktop/testing03/frontend/src/Components/Meter.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './Meter.css'; // Include your CSS file for styling\r\n\r\nconst Meter = () => {\r\n  const [uploadedFile, setUploadedFile] = useState(null); // State to store the uploaded file\r\n  const [responseMessage, setResponseMessage] = useState(''); // State to handle server responses\r\n  const [uploadProgress, setUploadProgress] = useState(0); // State to track upload progress\r\n  const fileInputRef = useRef(null); // Reference for file input\r\n\r\n  // Handle file selection\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0]; // Get the first file from the input\r\n    //setResponseMessage('file name',file)\r\n\r\n    // Validate file type (Excel files typically have .xls or .xlsx extensions)\r\n    if (!file || !file.name.match(/\\.(xls|xlsx)$/)) {\r\n      setResponseMessage('Please upload a valid Excel file (.xls or .xlsx)');\r\n      return;\r\n    }\r\n\r\n    setUploadedFile(file); // Save the file to the state\r\n\r\n    // Prepare form data\r\n    const formData = new FormData();\r\n    formData.append('file', file); // Append the file to the FormData\r\n\r\n    try {\r\n      // Use XMLHttpRequest to track upload progress\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('POST', 'http://127.0.0.1:5000/api/upload', true);\r\n\r\n      // Track upload progress\r\n      xhr.upload.onprogress = (event) => {\r\n        if (event.lengthComputable) {\r\n          const progress = Math.round((event.loaded / event.total) * 100);\r\n          setUploadProgress(progress); // Update progress state\r\n        }\r\n      };\r\n\r\n      xhr.onload = () => {\r\n        if (xhr.status === 200) {\r\n          const result = JSON.parse(xhr.responseText);\r\n          setResponseMessage(`Credits: ${result.credits}, Invalid Codes: ${result.invalid_codes.join(', ')}`);\r\n        } else {\r\n          const result = JSON.parse(xhr.responseText);\r\n          setResponseMessage(`Error: ${result.error || 'An error occurred'}`);\r\n        }\r\n        setUploadProgress(0); // Reset progress after upload completes\r\n      };\r\n\r\n      xhr.onerror = () => {\r\n        setResponseMessage('An error occurred during the upload.');\r\n        setUploadProgress(0); // Reset progress\r\n      };\r\n\r\n      xhr.send(formData); // Send the form data\r\n    } catch (error) {\r\n      setResponseMessage(`An error occurred: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Open file selection dialog\r\n  const handleFileSelect = () => {\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.click(); // Trigger the file input\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploadContainer\">\r\n      <form className=\"fileUpload\">\r\n        {/* File input */}\r\n        <input\r\n          type=\"file\"\r\n          className=\"fileElem\"\r\n          ref={fileInputRef} // Reference the input\r\n          style={{ display: 'none' }} // Hide the input element\r\n          onChange={handleFileUpload} // Handle file selection\r\n          accept=\".xls,.xlsx\" // Restrict file types to Excel\r\n        />\r\n\r\n        {/* Trigger file selection */}\r\n        <label className=\"fileSelect\" onClick={handleFileSelect}>\r\n          Upload File\r\n        </label>\r\n      </form>\r\n\r\n      {/* Upload Progress Bar */}\r\n      <div className=\"progressContainer\">\r\n        <div className=\"progressBarBackground\">\r\n          <div\r\n            className=\"progressBar\"\r\n            style={{ width: `${uploadProgress}%` }}\r\n          ></div>\r\n        </div>\r\n        <p className=\"progressText\">\r\n          {uploadProgress > 0\r\n            ? `${(uploadedFile?.size * (uploadProgress / 100) / (1024 * 1024)).toFixed(2)} MB out of ${(uploadedFile?.size / (1024 * 1024)).toFixed(2)} MB (${uploadProgress}%)`\r\n            : 'No file is currently uploading'}\r\n        </p>\r\n      </div>\r\n\r\n      {/* Display server response */}\r\n      {responseMessage && <p className=\"responseMessage\">{responseMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}